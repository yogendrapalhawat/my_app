import express from 'express';
import {
  createEvent,
  getAllEvents,
  registerToEvent,
  leaveEvent,
  getMyEvents,
  updateEvent,
  deleteEvent
} from '../controllers/eventController.js';

import { protect } from '../middlewares/authMiddleware.js';
import { adminOnly } from '../middlewares/adminMiddleware.js';

const router = express.Router();

/**
 * ðŸ“Œ Base Route: /api/events
 *
 * âœ… Routes:
 * - POST   /api/events/              â†’ Create new event
 * - GET    /api/events/              â†’ Get all events
 * - GET    /api/events/my            â†’ Get events joined by user
 * - POST   /api/events/:id/register  â†’ Register to event
 * - POST   /api/events/:id/leave     â†’ Leave event
 * - PUT    /api/events/:id           â†’ Update event
 * - DELETE /api/events/:id           â†’ Delete event
 */

// âœ… Create Event (any logged-in user)
router.post('/', protect, createEvent);
// router.post('/', protect, adminOnly, createEvent); // ðŸ‘‰ Enable this if only admin can create

// âœ… Get All Events (Public)
router.get('/', getAllEvents);

// âœ… Get Events joined by current user
router.get('/my', protect, getMyEvents);

// âœ… Register to an Event
router.post('/:id/register', protect, registerToEvent);

// âœ… Leave an Event
router.post('/:id/leave', protect, leaveEvent);

// âœ… Update Event (Logged-in user OR admin)
router.put('/:id', protect, updateEvent);
// router.put('/:id', protect, adminOnly, updateEvent); // ðŸ‘‰ Enable if only admin can update

// âœ… Delete Event (Logged-in user OR admin)
router.delete('/:id', protect, deleteEvent);
// router.delete('/:id', protect, adminOnly, deleteEvent); // ðŸ‘‰ Enable if only admin can delete

export default router;
